/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.assessment.work.grandKapital_api.controllers;

import com.assessment.work.grandKapital_api.models.Email;
import com.assessment.work.grandKapital_api.models.Error;
import com.assessment.work.grandKapital_api.models.Message;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-25T09:11:06.264542200+03:00[Europe/Minsk]")
@Validated
@Tag(name = "emails", description = "User email management")
public interface EmailsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /emails : Add email to user
     * Add new email address for user (must be unique)
     *
     * @param userId user id (required)
     * @param email new email (required)
     * @return Email added successfully (status code 200)
     *         or bad request (status code 400)
     */
    @Operation(
        operationId = "addUserEmail",
        summary = "Add email to user",
        description = "Add new email address for user (must be unique)",
        tags = { "emails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Email added successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Email.class)))
            }),
            @ApiResponse(responseCode = "400", description = "bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/emails",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Email>> addUserEmail(
        @NotNull @Parameter(name = "userId", description = "user id", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) Long userId,
        @NotNull @Parameter(name = "email", description = "new email", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = true) String email
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"email\" : \"new.email@example.com\" }, { \"email\" : \"new.email@example.com\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /emails : Replace email with new one
     * Replace user email address
     *
     * @param userId user id (required)
     * @param oldEmail  (required)
     * @param newEmail  (required)
     * @return Email replaced successfully (status code 200)
     *         or bad request (status code 400)
     */
    @Operation(
        operationId = "changeUserEmail",
        summary = "Replace email with new one",
        description = "Replace user email address",
        tags = { "emails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Email replaced successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
            }),
            @ApiResponse(responseCode = "400", description = "bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/emails",
        produces = { "application/json" }
    )
    default ResponseEntity<Message> changeUserEmail(
        @NotNull @Parameter(name = "userId", description = "user id", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) Long userId,
        @NotNull @Parameter(name = "oldEmail", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "oldEmail", required = true) String oldEmail,
        @NotNull @Parameter(name = "newEmail", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "newEmail", required = true) String newEmail
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Success!\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /emails : Remove email from user
     * Remove email address from user profile
     *
     * @param userId user id (required)
     * @param email  (required)
     * @return Email removed successfully (status code 200)
     *         or bad request (status code 400)
     */
    @Operation(
        operationId = "removeUserEmail",
        summary = "Remove email from user",
        description = "Remove email address from user profile",
        tags = { "emails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Email removed successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
            }),
            @ApiResponse(responseCode = "400", description = "bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/emails",
        produces = { "application/json" }
    )
    default ResponseEntity<Message> removeUserEmail(
        @NotNull @Parameter(name = "userId", description = "user id", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) Long userId,
        @NotNull @Parameter(name = "email", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = true) String email
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Success!\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
