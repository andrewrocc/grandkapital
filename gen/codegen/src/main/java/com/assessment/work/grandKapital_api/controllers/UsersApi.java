/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.assessment.work.grandKapital_api.controllers;

import org.springframework.format.annotation.DateTimeFormat;
import com.assessment.work.grandKapital_api.models.Error;
import java.time.LocalDate;
import com.assessment.work.grandKapital_api.models.Page;
import com.assessment.work.grandKapital_api.models.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-25T14:24:03.374571600+03:00[Europe/Minsk]")
@Validated
@Tag(name = "users", description = "Operations with user profiles")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /users/{userId} : Get user by ID
     * Retrieve user information by ID
     *
     * @param userId user id (required)
     * @return User details (status code 200)
     *         or bad request (status code 400)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Get user by ID",
        description = "Retrieve user information by ID",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> getUserById(
        @Parameter(name = "userId", description = "user id", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emails\" : [ \"ivan.petrov@example.com\" ], \"name\" : \"Иван Иванов\", \"phones\" : [ \"79200234567\" ], \"dateOfBirth\" : \"2000-01-23\", \"id\" : 1, \"account\" : { \"balance\" : 1500.75, \"id\" : 1 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users : Search users with filtering and pagination
     * Search users with various filters. Available to all users. Filters: - dateOfBirth: returns users born after specified date - phone: exact match - name: starts with match (case insensitive) - email: exact match 
     *
     * @param pageNumber page number (required)
     * @param pageSize Number of users, returned to each page (required)
     * @param dateOfBirth Filter users born after this date (format: DD.MM.YYYY) (optional)
     * @param phone Filter by exact phone match (format: 79200234567) (optional)
     * @param name Filter by names starting with the value (case insensitive) (optional)
     * @param email Filter by exact email match (optional)
     * @return List of users matching criteria (status code 200)
     *         or bad request (status code 400)
     */
    @Operation(
        operationId = "getUserPage",
        summary = "Search users with filtering and pagination",
        description = "Search users with various filters. Available to all users. Filters: - dateOfBirth: returns users born after specified date - phone: exact match - name: starts with match (case insensitive) - email: exact match ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of users matching criteria", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Page.class))
            }),
            @ApiResponse(responseCode = "400", description = "bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<Page> getUserPage(
        @NotNull @Min(0) @Parameter(name = "pageNumber", description = "page number", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = true) Integer pageNumber,
        @NotNull @Min(0) @Parameter(name = "pageSize", description = "Number of users, returned to each page", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = true) Integer pageSize,
        @Parameter(name = "dateOfBirth", description = "Filter users born after this date (format: DD.MM.YYYY)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dateOfBirth", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dateOfBirth,
        @Pattern(regexp = "^7\\d{10}$") @Parameter(name = "phone", description = "Filter by exact phone match (format: 79200234567)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "phone", required = false) String phone,
        @Size(min = 1) @Parameter(name = "name", description = "Filter by names starting with the value (case insensitive)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "email", description = "Filter by exact email match", in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = false) String email
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 0, \"total\" : 6, \"elementsTotal\" : 1, \"elements\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
